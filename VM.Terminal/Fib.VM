START:
    ; initialize register values
    LDVR 0 $R0
    LDVR 1 $R1
    LDVR 0x10 $R2
    LDVR 0x00a0 $R3
    LDVR 2 $R4
    LDVR 0 $S0
    LDVR 0xf000 $S1

    ; Save R0 and R1 value to memory
    STRR $R0 $R3
    CALL 0 INCREMENT
    POP $T1 ; return value count (0)
    INC $S0

    STRR $R1 $R3
    CALL 0 INCREMENT
    POP $T1 ; return value count (0)
    INC $S0

LOOP:
    ; Check for overflow
    AND $T0 $R2
    JNZ END

    ; increment number of numbers found
    INC $S0

    ; calculate next Fibonacci number (R0 + R1 -> ACC)
    ADD $R0 $R1

    ; Save Flag register for check later
    MOVE $FLAG $T0

    ; Write Fibonacci number to memory
    STRR $ACC $R3

    ; Shift all values R1 -> R0 ACC -> R1
    MOVE $R1 $R0
    MOVE $ACC $R1

    ; Increment address to save fibonnaci values at
    CALL 0 INCREMENT
    POP $T1 ; return value count (0)

    JUMP LOOP

END:
    ; print all the values
    LDVR 0x00a0 $S2

PRINT:
    CMPZ $S0
    JZ EXIT

    LDRR $S2 $R0
    STRR $R0 $S1
    ADD $R4 $S1 ; console address
    MOVE $ACC $S1

    ADD $R4 $S2 ; values address
    MOVE $ACC $S2

    DEC $S0 ; number of values left
    JUMP PRINT

EXIT:
    HALT

INCREMENT:
    ADD $R3 $R4
    MOVE $ACC $R3
    RET 0